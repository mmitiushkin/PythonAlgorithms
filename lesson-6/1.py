"""1. Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах
в рамках первых трех уроков. Проанализировать результат и определить программы
 с наиболее эффективным использованием памяти.

 Windows 10 x64 Python 3.9.6
 """

import sys


def show_size(x, level=0):
    size_par = sys.getsizeof(x)
    print(f'size={size_par}, object={x}')
    return size_par


# lesson-1
# 1. Найти сумму и произведение цифр трехзначного числа, которое вводит пользователь.

a = input(': ')
b = 0
c = 1
if 99 < int(a) < 1000:
    b = 0
    c = 1
    for i in range(len(a)):
        b += int(a[i])
        c *= int(a[i])
    print(f'Сумма цифр {a} = {b}')
    print(f'Произведение цифр {a} = {c}')
else:
    print('Нужно трехзначное число')


sum_memory = show_size(a) + show_size(b) + show_size(c)
print('В программе задействовано байт: {}'.format(sum_memory))

"""
: 345
Сумма цифр 345 = 12
Произведение цифр 345 = 60
size=52, object=345
size=28, object=12
size=28, object=60
В программе задействовано байт: 108
"""

# lesson-2
""" 1. Написать программу, которая будет складывать, вычитать, умножать или
делить два числа. Числа и знак операции вводятся пользователем. После
выполнения вычисления программа не должна завершаться, а должна запрашивать
новые данные для вычислений. Завершение программы должно выполняться при вводе
символа '0' в качестве знака операции. Если пользователь вводит неверный знак
(не "0", "+", "-", "*", "/"), то программа должна сообщать ему об ошибке и
снова запрашивать знак операции. Также сообщать пользователю о невозможности
деления на ноль, если он ввел 0 в качестве делителя. b"""

while True:
    first = int(input('1 число: '))
    second = int(input('2 число: '))
    sign = input('Операция: ')
    if sign not in '0+-*/':
        print("Ошибка")
        sign = input('Операция: ')
    if sign == '+':
        print(first + second)
    elif sign == '-':
        print(first - second)
    elif sign == '*':
        print(first * second)
    elif sign == '/':
        try:
            print(first / second)
        except ZeroDivisionError:
            print('Ошибка! Деление на ноль')
    elif sign == '0':
        break

sum_memory = show_size(first) + show_size(second) + show_size(sign)
print('В программе задействовано байт: {}'.format(sum_memory))

"""
1 число: 23
2 число: 5
Операция: 0
size=28, object=23
size=28, object=5
size=50, object=0
В программе задействовано байт: 106
"""
